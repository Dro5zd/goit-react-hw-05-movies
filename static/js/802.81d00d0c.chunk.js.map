{"version":3,"file":"static/js/802.81d00d0c.chunk.js","mappings":"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","sources":["api/axios.tsx","api/requests.ts","components/Banner/Banner.styled.tsx","components/Modal/Modal.styled.tsx","components/Modal/Modal.tsx","components/Row/Row.styled.tsx","components/Row/Row.tsx","hooks/use-handler-trailer.hook.ts","pages/MovieDetails.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3'\n});\n\nexport default instance;","const API_KEY = 'e388c066698fed551501fb44d5922327';\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchTrendingMovies: `/trending/movie/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginal: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    searchMovies: (search: string) => `/search/movie?api_key=${API_KEY}&query=${search}&language=en-US&page=1&include_adult=false`,\n    fetchMovieDetails: (movieId: string | undefined) => `movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n    fetchMovieCredits: (movieId: string | undefined) => `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n    fetchMovieReviews: (movieId: string | undefined) => `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`,\n    fetchSimilarMovies: (movieId: string | undefined) => `movie/${movieId}/similar?api_key=${API_KEY}&language=en-US`\n}\n\nexport default requests","import styled from 'styled-components'\nimport {Play} from '@styled-icons/foundation';\nimport {Link} from 'react-router-dom';\n\nconst base_url = 'https://image.tmdb.org/t/p/original'\n\ninterface IBannerWrapper {\n    movie: { backdrop_path: string }\n}\n\ninterface IButton {\n    more: boolean\n}\n\n\n\nexport const BannerWrapper = styled.div<IBannerWrapper>`\n  background-size: cover;\n  background-image: linear-gradient(180deg, transparent, rgba(37, 37, 37, 0.61), #111),\n  url(${props => props.movie?.backdrop_path ? `${base_url}${props.movie?.backdrop_path}` : ''});\n  background-position: center center, center center;\n  object-fit: contain;\n  position: absolute;\n  top: 0;\n  height: 100vh;\n  width: 100vw;\n`\n\nexport const BannerContent = styled.div`\n  margin-left: 30px;\n  padding-top: 140px;\n  height: 190px;\n  width: 600px;\n\n`\nexport const BannerTitle = styled.h1`\n  font-weight: 800;\n  font-size: 3rem;\n  padding-bottom: 0.3rem;\n\n`\n\nexport const PlayIcon = styled(Play)`\n  width: 30px;\n  position: absolute;\n  top: 5px;\n  left: 20px;\n  color: black;\n`;\nexport const BannerButton = styled.button<IButton>`\n  cursor: pointer;\n  margin-right: 1rem;\n  font-size: 20px;\n\n  border: none;\n  outline: none;\n  font-weight: 700;\n\n  color: ${props => !props.more ? 'black' : 'white'};\n  background-color: ${props => !props.more ? 'white' : 'rgba(117,117,117,0.62)'};\n  padding: ${props => !props.more ? '0.5rem 2rem 0.5rem 3.1rem' : '0.5rem 2rem'};\n  position: relative;\n\n  &:hover {\n    color: white;\n    background-color: rgba(51, 51, 51, 0.5);\n    transition: all 0.2s;\n  }\n\n  &:hover ${PlayIcon} {\n    color: white;\n    background-color: rgba(51, 51, 51, 0.5);\n    transition: all 0.2s;\n  }\n`\n\nexport const BannerLink = styled(Link)`\n  cursor: pointer;\n  margin-right: 1rem;\n  font-size: 20px;\n  text-decoration: none;\n\n  border: none;\n  outline: none;\n  font-weight: 700;\n\n  color: white;\n  background-color: rgba(117, 117, 117, 0.62);\n  padding: 0.5rem 2rem;\n  position: relative;\n\n  &:hover {\n    color: white;\n    background-color: rgba(51, 51, 51, 0.5);\n    transition: all 0.2s;\n  }\n`\n\nexport const BannerDescription = styled.p`\n  //width: 45rem;\n  line-height: 1.3;\n  font-size: 1.3rem;\n  max-width: 450px;\n  height: 140px;\n  overflow: scroll;\n  margin: 40px 0;\n  \n  &::-webkit-scrollbar{\n    display: none;\n  }\n`\n\nexport const MoreInfoContent = styled.div`\n  margin-top: 300px;\n  padding: 30px;\n`\n","import styled from 'styled-components';\n\nexport const OverlayModal = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n  \n  &:hover{\n    cursor: zoom-out;\n  }\n`;\n\nexport const ModalDiv = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  \n  &:hover{\n    transform: scale(1.03);\n    cursor: default;\n  }\n`;","import React, {MouseEvent, useEffect} from 'react';\nimport {ModalDiv, OverlayModal} from './Modal.styled';\nimport Youtube, {YouTubeProps} from 'react-youtube';\n\ninterface IModal {\n    setTrailerUrl: (value: string) => void,\n    trailerUrl: string,\n}\n\nexport function Modal({trailerUrl, setTrailerUrl}: IModal) {\n    const escHandler = (e: any) => {\n        if (e.key === \"Escape\") {\n            setTrailerUrl('')\n        }\n    }\n\n    const closeModalOnBackdrop = (e: MouseEvent<HTMLDivElement>) => {\n        if (e.currentTarget === e.target) {\n            setTrailerUrl('')\n        }\n    };\n\n    const opts: YouTubeProps['opts'] = {\n        height: '400',\n        width: '720',\n        playerVars: {\n            autoplay: 1,\n        },\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", escHandler);\n        return () => {\n            document.removeEventListener(\"keydown\", escHandler);\n        };\n    }, []);\n\n    return <OverlayModal onClick={closeModalOnBackdrop}>\n        <ModalDiv>\n            <Youtube videoId={trailerUrl} opts={opts}/>\n        </ModalDiv>\n    </OverlayModal>\n}","import styled from 'styled-components';\n\ninterface IRowPoster {\n    isLarge: boolean;\n    top?: string\n}\n\nexport const RowWrapper = styled.div<IRowPoster>`\n  margin-left: 20px;\n  margin-right: 20px;\n  position: relative;\n  top: ${({top}) => top || '65vh'};\n  z-index: 0;\n  min-height: ${({isLarge}) => (isLarge ? '300px' : '100px')};\n  //padding-top: 60vh;\n`;\n\nexport const RowTitle = styled.h2`\n  //color: white;\n`;\n\nexport const RowPosters = styled.div`\n  display: flex;\n  overflow-y: hidden;\n  overflow-x: scroll;\n  padding: 20px;\n  min-height: 100px;\n  \n  &::-webkit-scrollbar{\n    display: none;\n  }\n`;\n\nexport const RowPosterTitle = styled.p`\n  background-color: rgba(0, 0, 0, 0.4);\n  padding: 10px 5px;\n  z-index: 6;\n  position: absolute;\n  bottom: 0;\n  width: 80%;\n  transition: transform 450ms;\n`;\nexport const RowPosterWrapper = styled.div`\n  position: relative;\n  \n\n  &:hover ${RowPosterTitle}{\n    transform: scale(1.08);\n  }\n \n`;\n\nexport const RowPoster = styled.img<IRowPoster>`\n  object-fit: contain;\n  margin-right: 10px;\n  transition: transform 450ms;\n  max-height: ${({isLarge}) => (isLarge ? '250px' : '100px')};\n  width: 150px;\n  &:hover{\n    transform: scale(1.08);\n  }\n  \n`;\n","import React, {useContext, useEffect, useState} from 'react';\nimport './Row.styled'\nimport instance from '../../api/axios';\nimport {RowPoster, RowPosters, RowTitle, RowWrapper} from './Row.styled';\nimport {Link, useSearchParams} from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport {IsLoadingContext} from '../../App';\n\nconst base_url = 'https://image.tmdb.org/t/p/original'\n\ninterface IRow {\n    title: string,\n    fetchUrl: string,\n    isLargeRow: boolean,\n    top?: string\n}\n\nexport interface IMovies {\n    id: string,\n    poster_path: string,\n    backdrop_path: string,\n    name: string,\n    original_name: string,\n    title: string,\n    overview: string\n}\n\nconst Row = ({title, fetchUrl, isLargeRow, top}: IRow) => {\n    const [movies, setMovies] = useState<IMovies[]>([]);\n    const [searchParams, setSearchParams] = useSearchParams('');\n    const {\n        setIsLoading\n    } = useContext(IsLoadingContext);\n\n    useEffect(() => {\n            setIsLoading(true);\n\n            async function fetchData() {\n                try {\n                    const res = await instance.get(fetchUrl);\n                    if (res.data.results.length === 0) {\n                        setSearchParams({search: ''})\n                        return Notiflix.Notify.failure('Sorry, there are no movies matching your search query. Please' +\n                            ' try again.');\n                    } else\n                        setMovies(res.data.results)\n                } catch (e) {\n                    console.log(e)\n                } finally {\n                    setIsLoading(false);\n                }\n            }\n\n            fetchData();\n        }, [fetchUrl, setSearchParams]\n    );\n\n    return (\n        <RowWrapper isLarge={isLargeRow} top={top}>\n            <RowTitle className=\"row-title\">{title}</RowTitle>\n            <RowPosters>\n                {movies.map(movie => (\n                    <Link to={`/movies/${movie.id}`} key={movie.id}>\n                        <RowPoster isLarge={isLargeRow}\n                                   src={movie.poster_path ? `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}` : ''}\n                                   alt={movie.name}/>\n                    </Link>\n                ))}\n            </RowPosters>\n        </RowWrapper>\n    )\n}\n\nexport default Row","import {useState} from 'react';\nimport {IMovies} from '../components/Row/Row';\nconst movieTrailer = require( 'movie-trailer' )\nexport const useHandlerTrailer = () => {\n    const [trailerUrl, setTrailerUrl] = useState<string>('')\n    const handleTrailer = (movie: IMovies) => {\n        if (trailerUrl) {\n            setTrailerUrl('')\n        } else {\n            movieTrailer(movie?.title || '')\n                .then((url: string) => {\n                    const urlParams = new URLSearchParams(new URL(url).search)\n                    // @ts-ignore\n                    setTrailerUrl(urlParams.get('v'))\n                })\n                .catch((error: any) => console.log(error))\n        }\n    }\n    return {handleTrailer, trailerUrl, setTrailerUrl}\n}","import React, {Suspense, useEffect, useState} from 'react';\nimport {Outlet, useNavigate, useParams} from 'react-router-dom';\nimport instance from '../api/axios';\nimport {\n    BannerButton,\n    BannerContent,\n    BannerDescription, BannerLink,\n    BannerTitle,\n    BannerWrapper,\n    MoreInfoContent,\n    PlayIcon\n} from '../components/Banner/Banner.styled';\nimport requests from '../api/requests';\nimport Row, {IMovies} from '../components/Row/Row';\nimport {useHandlerTrailer} from '../hooks/use-handler-trailer.hook';\nimport {Modal} from '../components/Modal/Modal';\n\nexport type MovieIdType = {\n    movieId: string | undefined\n}\n\nconst MovieDetails = () => {\n    const { trailerUrl, handleTrailer, setTrailerUrl} = useHandlerTrailer()\n    const navigate = useNavigate();\n    const goBack = () => {\n        navigate(-1)\n    }\n\n    const {movieId} = useParams<MovieIdType>();\n\n    const [movie, setMovie] = useState<IMovies>({\n        name: '',\n        backdrop_path: '',\n        poster_path: '',\n        id: '',\n        title: '',\n        original_name: '',\n        overview: ''\n    });\n\n    useEffect(() => {\n            async function fetchMovie() {\n                const request = await instance.get(requests.fetchMovieDetails(movieId));\n                setMovie(request.data)\n                return request;\n            }\n            fetchMovie();\n        }, [movieId]\n    );\n\n    return (\n            <BannerWrapper movie={movie}>\n                <BannerContent>\n                    <BannerButton more={true} onClick={goBack}>Back to</BannerButton>\n                    <BannerTitle>{movie?.name || movie?.title || movie?.original_name}</BannerTitle>\n                    <BannerButton more={false}\n                                  onClick={() => handleTrailer(movie)}><PlayIcon/>Watch trailer</BannerButton>\n                    <BannerDescription>{movie?.overview}</BannerDescription>\n                    <BannerLink to='cast' replace>\n                        Cast\n                    </BannerLink>\n                    <BannerLink to='reviews' state={{movieName: movie?.title}} replace>\n                        Reviews\n                    </BannerLink>\n                </BannerContent>\n                <MoreInfoContent >\n                    <Suspense fallback={<div>Loading subpage...</div>}>\n                    <Outlet/>\n                    </Suspense>\n                </MoreInfoContent>\n                    <Row title=\"Similar movies\" fetchUrl={requests.fetchSimilarMovies(movieId)}\n                         isLargeRow={true} top='0'/>\n                {trailerUrl && <Modal\n                  setTrailerUrl={setTrailerUrl}\n                  trailerUrl={trailerUrl}\n                />}\n            </BannerWrapper>\n    );\n};\n\nexport default MovieDetails\n"],"names":["instance","axios","baseURL","API_KEY","requests","fetchTrending","fetchTrendingMovies","fetchNetflixOriginal","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","searchMovies","search","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","fetchSimilarMovies","BannerWrapper","styled","props","movie","backdrop_path","BannerContent","BannerTitle","PlayIcon","Play","BannerButton","more","BannerLink","Link","BannerDescription","MoreInfoContent","OverlayModal","ModalDiv","Modal","trailerUrl","setTrailerUrl","escHandler","e","key","useEffect","document","addEventListener","removeEventListener","onClick","currentTarget","target","videoId","opts","height","width","playerVars","autoplay","RowWrapper","top","isLarge","RowTitle","RowPosters","RowPosterTitle","RowPosterWrapper","RowPoster","title","fetchUrl","isLargeRow","useState","movies","setMovies","useSearchParams","setSearchParams","setIsLoading","useContext","IsLoadingContext","res","data","results","length","Notiflix","console","log","fetchData","className","map","to","id","src","poster_path","alt","name","movieTrailer","require","useHandlerTrailer","handleTrailer","then","url","urlParams","URLSearchParams","URL","get","catch","error","navigate","useNavigate","useParams","original_name","overview","setMovie","request","fetchMovie","replace","state","movieName","Suspense","fallback"],"sourceRoot":""}