{"version":3,"file":"static/js/405.19f73811.chunk.js","mappings":"2IAEMA,E,QAAWC,EAAAA,OAAa,CAC1BC,QAAS,iCAGb,K,qBCNA,IAAMC,EAAU,mCAEVC,EAAW,CACbC,cAAc,8BAAD,OAAgCF,EAAO,mBACpDG,oBAAoB,gCAAD,OAAkCH,EAAO,mBAC5DI,qBAAqB,wBAAD,OAA0BJ,EAAO,sBACrDK,cAAc,4BAAD,OAA8BL,EAAO,mBAClDM,kBAAkB,2BAAD,OAA6BN,EAAO,mBACrDO,kBAAkB,2BAAD,OAA6BP,EAAO,mBACrDQ,kBAAkB,2BAAD,OAA6BR,EAAO,mBACrDS,mBAAmB,2BAAD,OAA6BT,EAAO,sBACtDU,aAAc,SAACC,GAAc,sCAA8BX,EAAO,kBAAUW,EAAM,+CAClFC,kBAAmB,SAACC,GAA2B,sBAAcA,EAAO,oBAAYb,EAAO,oBACvFc,kBAAmB,SAACD,GAA2B,sBAAcA,EAAO,4BAAoBb,EAAO,oBAC/Fe,kBAAmB,SAACF,GAA2B,sBAAcA,EAAO,4BAAoBb,EAAO,oBAC/FgB,mBAAoB,SAACH,GAA2B,sBAAcA,EAAO,4BAAoBb,EAAO,qBAGpG,K,iOC2CA,EAnDa,WAET,IAAOa,GAAWI,EAAAA,EAAAA,MAAXJ,QAEP,GAAwCK,EAAAA,EAAAA,UAAS,CAAC,CAC9CC,GAAI,EACJC,KAAM,GACNC,UAAW,GACXC,aAAc,MACf,eALIC,EAAY,KAAEC,EAAe,KAQhCC,GACAC,EAAAA,EAAAA,YAAWC,EAAAA,GADXF,aAsBJ,OAnBAG,EAAAA,EAAAA,YAAU,WAG8B,aAU/B,OAV+B,0BAAhC,kHAE0B/B,EAAAA,EAAAA,IAAaI,EAAAA,EAAAA,kBAA2BY,IAAU,KAAD,EAA7DgB,EAAG,OACTL,EAAgBK,EAAIC,KAAKC,MAAK,sDAKV,OALU,SAK9BN,GAAa,GAAO,2EAE3B,sBAZDA,GAAa,GAAM,WAEa,wBAYhCX,EACJ,GAAG,CAACD,EAASY,KAIb,UAAC,KAAU,CAACO,SAAS,EAAMC,IAAI,IAAG,WAC9B,SAAC,KAAQ,oBACT,SAAC,KAAU,UACNV,EAAaW,KAAI,SAAAC,GAAI,OAClB,UAAC,KAAgB,YACb,SAAC,KAAc,UAAEA,EAAKf,QACtB,SAAC,KAAS,CAACY,SAAS,EACTI,IAAKD,EAAKb,aAAY,UA3CxC,uCA2CsD,OAAGa,EAAKb,cAAY,UAAQe,GAChEC,IAAKH,EAAKf,SAJFe,EAAKhB,GAKT,QAKvC,C,mNCpDaoB,EAAaC,EAAAA,GAAAA,IAAU,oKAI3B,YAAK,SAAHP,KAAgB,MAAM,IAEjB,YAAS,SAAPD,QAAwB,QAAU,OAAO,IAI9CS,EAAWD,EAAAA,GAAAA,GAAS,2CAIpBE,EAAaF,EAAAA,GAAAA,IAAU,sLAYvBG,EAAiBH,EAAAA,GAAAA,EAAQ,0LASzBI,EAAmBJ,EAAAA,GAAAA,IAAU,yGAI9BG,GAMCE,EAAYL,EAAAA,GAAAA,IAAU,8LAInB,YAAS,SAAPR,QAAwB,QAAU,OAAO,G","sources":["api/axios.tsx","api/requests.ts","components/Cast/Cast.tsx","components/Row/Row.styled.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3'\n});\n\nexport default instance;","const API_KEY = 'e388c066698fed551501fb44d5922327';\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchTrendingMovies: `/trending/movie/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginal: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    searchMovies: (search: string) => `/search/movie?api_key=${API_KEY}&query=${search}&language=en-US&page=1&include_adult=false`,\n    fetchMovieDetails: (movieId: string | undefined) => `movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n    fetchMovieCredits: (movieId: string | undefined) => `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n    fetchMovieReviews: (movieId: string | undefined) => `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`,\n    fetchSimilarMovies: (movieId: string | undefined) => `movie/${movieId}/similar?api_key=${API_KEY}&language=en-US`\n}\n\nexport default requests","import React, {useContext, useEffect, useState} from 'react';\nimport requests from '../../api/requests';\nimport noImage from '../../assets/no-image.jpeg'\nimport {useParams} from 'react-router-dom';\nimport {MovieIdType} from '../../pages/MovieDetails';\nimport instance from '../../api/axios';\nimport {RowPoster, RowPosters, RowPosterTitle, RowPosterWrapper, RowTitle, RowWrapper} from '../Row/Row.styled';\nimport {IsLoadingContext} from '../../App';\n\nconst base_url = 'https://image.tmdb.org/t/p/original'\nconst Cast = () => {\n\n    const {movieId} = useParams<MovieIdType>();\n\n    const [movieCredits, setMovieCredits] = useState([{\n        id: 0,\n        name: '',\n        character: '',\n        profile_path: ''\n    }]);\n\n    const {\n        setIsLoading\n    } = useContext(IsLoadingContext);\n\n    useEffect(() => {\n            setIsLoading(true);\n\n            async function fetchMovieCredits() {\n                try {\n                    const res = await instance.get(requests.fetchMovieCredits(movieId));\n                    setMovieCredits(res.data.cast)\n\n                } catch (e) {\n\n                } finally {\n                    setIsLoading(false);\n                }\n            }\n\n            fetchMovieCredits();\n        }, [movieId, setIsLoading]\n    );\n\n    return (\n        <RowWrapper isLarge={true} top='0'>\n            <RowTitle>Cast</RowTitle>\n            <RowPosters>\n                {movieCredits.map(item => (\n                    <RowPosterWrapper key={item.id}>\n                        <RowPosterTitle>{item.name}</RowPosterTitle>\n                        <RowPoster isLarge={true}\n                                   src={item.profile_path ? `${base_url}${item.profile_path}` : `${noImage}`}\n                                   alt={item.name}/>\n                    </RowPosterWrapper>\n                ))}\n            </RowPosters>\n        </RowWrapper>\n    );\n};\n\nexport default Cast\n","import styled from 'styled-components';\n\ninterface IRowPoster {\n    isLarge: boolean;\n    top?: string\n}\n\nexport const RowWrapper = styled.div<IRowPoster>`\n  margin-left: 20px;\n  margin-right: 20px;\n  position: relative;\n  top: ${({top}) => top || '65vh'};\n  z-index: 0;\n  min-height: ${({isLarge}) => (isLarge ? '300px' : '100px')};\n  //padding-top: 60vh;\n`;\n\nexport const RowTitle = styled.h2`\n  //color: white;\n`;\n\nexport const RowPosters = styled.div`\n  display: flex;\n  overflow-y: hidden;\n  overflow-x: scroll;\n  padding: 20px;\n  min-height: 100px;\n  \n  &::-webkit-scrollbar{\n    display: none;\n  }\n`;\n\nexport const RowPosterTitle = styled.p`\n  background-color: rgba(0, 0, 0, 0.4);\n  padding: 10px 5px;\n  z-index: 6;\n  position: absolute;\n  bottom: 0;\n  width: 80%;\n  transition: transform 450ms;\n`;\nexport const RowPosterWrapper = styled.div`\n  position: relative;\n  \n\n  &:hover ${RowPosterTitle}{\n    transform: scale(1.08);\n  }\n \n`;\n\nexport const RowPoster = styled.img<IRowPoster>`\n  object-fit: contain;\n  margin-right: 10px;\n  transition: transform 450ms;\n  max-height: ${({isLarge}) => (isLarge ? '250px' : '100px')};\n  width: 150px;\n  &:hover{\n    transform: scale(1.08);\n  }\n  \n`;\n"],"names":["instance","axios","baseURL","API_KEY","requests","fetchTrending","fetchTrendingMovies","fetchNetflixOriginal","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","searchMovies","search","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","fetchSimilarMovies","useParams","useState","id","name","character","profile_path","movieCredits","setMovieCredits","setIsLoading","useContext","IsLoadingContext","useEffect","res","data","cast","isLarge","top","map","item","src","noImage","alt","RowWrapper","styled","RowTitle","RowPosters","RowPosterTitle","RowPosterWrapper","RowPoster"],"sourceRoot":""}